import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "app/store";
import { LoginRequest, LoginResponse, LoginServices } from "./LoginServices";

type StatusEnum = "idle" | "loading" | "failed";

export interface LoginState {
  value: LoginResponse;
  status: StatusEnum;
}

const initialState: LoginState = {
  value: { accessToken: undefined },
  status: "idle",
};

export const loginWithEmailAndPassword = createAsyncThunk<LoginResponse, LoginRequest>(
  "users/login",
  async (request) => {
    const loginServices: LoginServices = new LoginServices();
    const response = await loginServices.fakeLogin(request);
    return response;
  },
);

const resetState = (state: LoginState) => {
  state.value.accessToken = undefined;
};

export const loginSlice = createSlice({
  name: "login",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginWithEmailAndPassword.pending, (state) => {
        state.status = "loading";
        resetState(state);
      })
      .addCase(loginWithEmailAndPassword.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload;
      })
      .addCase(loginWithEmailAndPassword.rejected, (state) => {
        state.status = "failed";
        resetState(state);
      });
  },
});

export const selectAccessToken = (state: RootState): string | undefined => state.login.value?.accessToken;
export const selectStatus = (state: RootState): StatusEnum => state.login.status;

export default loginSlice.reducer;
